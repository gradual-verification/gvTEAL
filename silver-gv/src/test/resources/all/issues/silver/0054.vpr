// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

method m1()
{
    var k: Perm
    // ExpectedOutput(consistency.error) // revive this annotation when parser error below not expected in this test file - Jenna
    //:: ExpectedOutput(parser.error)
    k := wildcard

    // ExpectedOutput(consistency.error) // revive this annotation when parser error not expected in this test file - Jenna
    assert wildcard < k
}

method m2()
{
    var k: Perm
    // ExpectedOutput(consistency.error) // revive this annotation when parser error not expected in this test file - Jenna
    k := wildcard
}

field f: Int

method m3(obj: Ref)
    requires acc(obj.f, wildcard)
    ensures acc(obj.f, wildcard)
{
    var i: Int := 4
    while (i > 0)
        invariant acc(obj.f, wildcard)
    {
        i := i - obj.f
    }
}
