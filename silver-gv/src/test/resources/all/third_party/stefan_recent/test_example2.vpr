// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field Counter__x: Int

//:: ExpectedOutput(parser.error)
method Loop__incr(diz: Ref, current_thread_id: Int, c: Ref, y: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires c != null
  requires acc(c.Counter__x, write)
  requires y >= 0
  ensures c != null
  ensures acc(c.Counter__x, write)
  ensures c.Counter__x == old(c.Counter__x) + y
{
  var i: Int
  var __flatten_1: Int
  var __flatten_4: Int
  i := 0
  while (i < y)
    invariant (0 <= i) && (i <= y)
    invariant c != null
    invariant acc(c.Counter__x, write)
    invariant c.Counter__x == old(c.Counter__x) + i
  {
    __flatten_1 := c.Counter__x + 1
    __flatten_4 := __flatten_1
    c.Counter__x := __flatten_4
    i := i + 1
  }
}

method Counter__incr(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.Counter__x, write)
  ensures acc(diz.Counter__x, write)
  ensures diz.Counter__x == old(diz.Counter__x) + 1
{
  var __flatten_2: Int
  var __flatten_5: Int
  __flatten_2 := diz.Counter__x + 1
  __flatten_5 := __flatten_2
  diz.Counter__x := __flatten_5
}
